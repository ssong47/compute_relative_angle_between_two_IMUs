function plot_tabulate(all_angle_file_names, all_metric_file_names, read_directory, save_status, save_directory)
%{
    PURPOSE: To plot and tabulate the computed angles data

    WHHAT IT DOES: Plots computed angle from different methods (GI, AI, CF,
    KF, DMP) across the time. Plots RMSE plot for different methods across
    time. Tabulate key metrics involving time delay, RMSE. 

    WRITTEN ON: 25th January 2020 

    DONE BY: Seung Yun Song <ssong47@illinois.edu>
    
    REFER THE PAPER: "" 
%}    


%{
    LICENSE
     This code "plot_tabulate" is placed under the University of Illinois at Urbana-Champaign license
     Copyright (c) 2020 Seung Yun Song

     Permission is hereby granted, free of charge, to any person obtaining a copyblu
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.

%}  


         
for i_file = 1:length(all_angle_file_names)
    disp('Plotting and Tabulating Computed Angles and Metrics...');

    directory = save_directory;


    name_decomp = regexp(all_angle_file_names{i_file}, '_', 'split');
    speed_type = regexprep(name_decomp{1}(3), '.mat', '');
    rot_type = name_decomp{1}(2);

    save_metric_file_name = strcat(strcat(strcat('metric_',rot_type), '_'), speed_type);
    save_status_metric = 'yes'; 
    fs = 100;
    dt = 1/fs;

    %% Load Angle Data
    file_name = strcat(directory, char(all_angle_file_names{i_file}));
    load(file_name);


    %% Load Metric Data 
    file_name = strcat(directory, char(all_metric_file_names{i_file}));
    load(file_name);


    %% Find data in the respective time zones

    for i_zone = 1:4
        time_master{i_zone} = time(index{i_zone}(1):index{i_zone}(2));
        angle_master{i_zone}{1}{1} = ai_angle_1(index{i_zone}(1):index{i_zone}(2));
        angle_master{i_zone}{2}{1} = ai_angle_2(index{i_zone}(1):index{i_zone}(2));
        angle_master{i_zone}{3}{1} = ai_angle(index{i_zone}(1):index{i_zone}(2));

        angle_master{i_zone}{1}{2} = gi_angle_1(index{i_zone}(1):index{i_zone}(2));
        angle_master{i_zone}{2}{2} = gi_angle_2(index{i_zone}(1):index{i_zone}(2));
        angle_master{i_zone}{3}{2} = gi_angle(index{i_zone}(1):index{i_zone}(2));

        angle_master{i_zone}{1}{3} = cf_angle_1(index{i_zone}(1):index{i_zone}(2));
        angle_master{i_zone}{2}{3} = cf_angle_2(index{i_zone}(1):index{i_zone}(2));
        angle_master{i_zone}{3}{3} = cf_angle(index{i_zone}(1):index{i_zone}(2));

        angle_master{i_zone}{1}{4} = kf_angle_1(index{i_zone}(1):index{i_zone}(2));
        angle_master{i_zone}{2}{4} = kf_angle_2(index{i_zone}(1):index{i_zone}(2));
        angle_master{i_zone}{3}{4} = kf_angle(index{i_zone}(1):index{i_zone}(2));

        angle_master{i_zone}{1}{5} = dmp_angle_1(index{i_zone}(1):index{i_zone}(2));
        angle_master{i_zone}{2}{5} = dmp_angle_2(index{i_zone}(1):index{i_zone}(2));
        angle_master{i_zone}{3}{5} = dmp_angle(index{i_zone}(1):index{i_zone}(2));

        angle_master{i_zone}{4}{1} = encoder(index{i_zone}(1):index{i_zone}(2));
    end


    %% Compute RMSE Average and STD 
    for i_method = 1:5
        for i_zone = 1:4
            for i_imu = 1:3
                   rmse_avg_master{i_zone}{i_imu}{i_method} = mean(div_master_rmse{i_zone}{i_imu}(:,i_method));       
                   rmse_std_master{i_zone}{i_imu}{i_method} = std(div_master_rmse{i_zone}{i_imu}(:,i_method));
            end     
        end
    end


    %% Plot 5 Different Methods vs Encoder 
    line_width = 3;
    line_style = {'-','-','-','-','-','-'};
    time_begin = [4.76, 14.76, 24.76];
    time_end = [4.999, 14.999, 24.9999];
    time_str = {{'4.76', '5'},{'14.76','15'},{'24.76','25'}};
    

    figure1 = figure('Position', [100, 100, 1024, 300], 'PaperSize', [2 4]);
    for i_plot = 1:3
        subplot(1,3,i_plot);
        plot(time_master{i_plot}/60, angle_master{i_plot}{4}{1}, 'linewidth', line_width + 0.5, 'color', 'k', 'linestyle', line_style{1});
        hold on

        if strcmp(rot_type,'yaw') ~= 1
            plot(time_master{i_plot}/60, angle_master{i_plot}{3}{1}, 'linewidth', line_width, 'color', [57 106 177]/256,'linestyle', line_style{2});
        end  
        plot(time_master{i_plot}/60, angle_master{i_plot}{3}{2}, 'linewidth', line_width, 'color', [62 150 81]/256,'linestyle', line_style{3});
        if strcmp(rot_type,'yaw') ~= 1
            plot(time_master{i_plot}/60, angle_master{i_plot}{3}{3}, 'linewidth', line_width, 'color', [218 124 48]/256,'linestyle', line_style{2});
            plot(time_master{i_plot}/60, angle_master{i_plot}{3}{4}, 'linewidth', line_width, 'color', [204 37 41]/256,'linestyle', line_style{5});
        end 
        
        plot(time_master{i_plot}/60, angle_master{i_plot}{3}{5}, 'linewidth', line_width, 'color', [107 76 154]/256,'linestyle', line_style{6});
     

        xlim([(time_master{i_plot}(end - 1450))/60, time_master{i_plot}(end)/60]);
        ylim([0 200]);
        xlabel('time (min)');
        ylabel('Angle (\circ)');
        xticks([time_begin(i_plot) time_end(i_plot)]);
        xticklabels(time_str{i_plot}); 
        
        ax1 = gca;
        ax1.FontSize = 20;
        ax1.FontName = 'Arial';
        ax1.LineWidth = line_width - 1;
        
    end
    if strcmp(rot_type,'yaw') ~= 1
%         legend('ENC','AI','GI','CF','KF','DMP', 'Location', 'northeastoutside');
    else
%         legend('ENC','GI','DMP', 'Location', 'northeastoutside');
    end
    



    %% RMSE Plot 
    figure2 = figure('Position', [100, 100, 1024, 500]);
    t_index = length(div_master_rmse{4}{3}(:,1));
    time = time_master{4}(1:t_index)/60 - time_master{4}(1)/60;

    
    
    % plotting AI 
    if strcmp(rot_type,'yaw') ~= 1
        p(1) = plot(time, div_master_rmse{4}{3}(:,1), 'linewidth', line_width, 'color', [57 106 177]/256,'linestyle', line_style{2});
        
    end
    hold on;
    
    % plotting GI
    p(2) = plot(time, div_master_rmse{4}{3}(:,2), 'linewidth', line_width, 'color', [62 150 81]/256,'linestyle', line_style{3});
    
    % plotting CF, KF
    if strcmp(rot_type,'yaw') ~= 1
        p(3) = plot(time, div_master_rmse{4}{3}(:,3), 'linewidth', line_width, 'color', [218 124 48]/256,'linestyle', line_style{4});
        p(4) = plot(time, div_master_rmse{4}{3}(:,4), 'linewidth', line_width, 'color', [204 37 41]/256,'linestyle', line_style{5});
    end
    
    % plotting DMP
    p(5) = plot(time, div_master_rmse{4}{3}(:,5), 'linewidth', line_width, 'color', [107 76 154]/256,'linestyle', line_style{6});
    
    p(6) = yline(6, 'k--','LineWidth', line_width);

    if strcmp(rot_type,'yaw') ~= 1
        xlabel('time (min)');
        ylabel('RMSE (\circ)');
        ylim([0 8]);
        yticks([0, 2, 4, 6, 8]);
        yticklabels({'0','2','4','6','8'});
        xlim([0 25]);
    else
        gi_rmse_limit = find_time_rmse_limit()
        xline(gi_rmse_limit, 'k--','LineWidth', line_width);
        xline(dmp_rmse_limit, 'k--','LineWidth', line_width);
        xlabel('time (min)');
        ylabel('RMSE (\circ)');
        ylim([0 50]);
        yticks([0, 6, 10, 20, 30, 40, 50]);
        yticklabels({'0','6','10','20','30','40','50'});
        xlim([0 25]);
    end

    ax2 = gca;
    ax2.FontSize = 20;
    ax2.FontName = 'Arial';
    ax2.LineWidth = line_width - 1;
    
        
    %% Tabulate Metrics 
    imu_type = 3;
    table_data = {};
    for i_col = 1:20
           i_method = floor((i_col-1)/4) + 1;
           i_zone =  mod(i_col, 4);
           if i_zone == 0
              i_zone = 4; 
           end
           rmse_avg_table_data{i_col} = rmse_avg_master{i_zone}{imu_type}{i_method};% rmse_std_master{i_zone}{imu_type}{i_method}];           
           rmse_std_table_data{i_col} = rmse_std_master{i_zone}{imu_type}{i_method};% 
           
           delay_table_data{i_col} = div_master_delay{i_zone}{imu_type}(i_method);
   end
end
end














