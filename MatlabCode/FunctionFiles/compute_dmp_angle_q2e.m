function [dmp_angle_1, dmp_angle_2, dmp_angle] = compute_dmp_angle_q2e(rot_type, speed_type, imu1_q1, imu1_q2, imu1_q3, imu1_q4, imu2_q1, imu2_q2, imu2_q3, imu2_q4)
%{
    PURPOSE: To compute angle using Digital Motion Processor (DMP)

    WHAT IT DOES: Computes angle generated by the quaternions obtained from 
    Digital Motion Processor (DMP),a propietary algorithm developed by InvenSense. 
    The quaternions are converted to intrinsic Euler Angles ('ZYX'). For a
    given rotation type, the Euler angle of interest is defined.
    
    See below link for more details: 
    https://invensense.tdk.com/smartmotion/

    WRITTEN ON: 27th November 2021

    DONE BY: Seung Yun Song <ssong47@illinois.edu>
    
    REFER THE PAPER:  S. Y. Song, Y. Pei, and E. T. Hsiao-Wecksler, 
    “Estimating Relative Angles Using Two Inertial Measurement Units Without Magnetometers,” 
    IEEE Sens. J., 2021.
%}    


%{
    LICENSE
     This code "compute_dmp_angle_q2e.m" is placed under the University of Illinois at Urbana-Champaign license
     Copyright (c) 2021 Seung Yun Song

     Permission is hereby granted, free of charge, to any person obtaining a copyblu
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.

%}  
    % Convert each IMU's quaternions to Euler Angles. 
    dmp_angle_1 = quat2eul([imu1_q1, imu1_q2, imu1_q3, imu1_q4]) * 180/pi;
    dmp_angle_2 = quat2eul([imu2_q1, imu2_q2, imu2_q3, imu2_q4]) * 180/pi;
    
    % For a given rotation type, extract the relevant angle of interest and 
    % compute the angular difference between the two IMUs. 
    
    if strcmp(rot_type, 'roll') == 1
        % compute DMP angle from IMU 1
        dmp_angle_1 = wrapTo360(dmp_angle_1(:,3)); 
        
        % compute DMP angle from IMU 2
        dmp_angle_2 = wrapTo360(dmp_angle_2(:,3)); 
        
    elseif strcmp(rot_type, 'pitch') == 1
        dmp_angle_1 = dmp_angle_1(:,2);
        dmp_angle_2 = dmp_angle_2(:,2);
        
    elseif strcmp(rot_type, 'yaw') == 1
        dmp_angle_1 = -dmp_angle_1(:,1); % n        
        if strcmp(speed_type, 'slow') == 1 
            %We added "wrapTo360" for slow yaw trial since DMP angle drifts 
            %so much that the angle goes beyond 360 degrees for this trial. 
            dmp_angle_2(:,1) = wrapTo360(dmp_angle_2(:,1));
        end
        dmp_angle_2 = -dmp_angle_2(:,1);
    end
    
    % Compute relative DMP angle
    dmp_angle = dmp_angle_2 - dmp_angle_1; 

end